// Test file generated by C2E https://community.modlycrew/c2e
// Imports
import * as ExampleImports from '../../examples/example-imports.js';


describe('🏢 [0.0.1] Capability A - This is the capability _description',()=>{
describe('📑1st Story Board - This is a test Story Board with 2 scenes',()=>{let varSB1;
let   schema;
it('🔧 1st Story Board Action',()=>{
varSB1 = 4 * 4;
cy.log('varSB1 = ', JSON.stringify(varSB1));
  schema = {
      $id: "test",
      type: "object",
      properties: {
          foo: { type: "integer" },
          bar: { type: "string" }
      },
      required: ["foo"],
      additionalProperties: false
  }
  ajv.addSchema(schema, schema.$id);
cy.log('  schema = ', JSON.stringify(  schema));
});
describe('📃1st Scene - This is the first scene & has 2 user stories',()=>{let varScene1;
it('🔧 1st Scene Action',()=>{
varScene1 = 'Scene level Variable';
cy.log('varScene1 = ', JSON.stringify(varScene1));
});
describe('👩‍🏭User Story 1 - This is the first User Story with 2 criteria',()=>{let varUserStory1;
let varUserStory2;
let   data;
it('🔧 1st User Story Action',()=>{
varUserStory1 = ExampleImports.standardExample();
cy.log('varUserStory1 = ', JSON.stringify(varUserStory1));
cy.log('Set varUserStory2 to .asyncExample()"');
cy.wrap(null).then(() => {
    return (new Cypress.Promise((resolve, reject) => {
        resolve(
            ExampleImports.asyncExample('Provided Import Async Example Value')
        );    })).then((obj) => {
        varUserStory2 = obj;
        cy.log("varUserStory2 => " + JSON.stringify(varUserStory2));
    });
});
  data = { foo: 1, bar: "abc", baz: null}
cy.log('  data = ', JSON.stringify(  data));
});
it("🚧 1st Criteria - Given the above Actions have been run successfully, When all variables have been set, Then...",()=>{expect(varSB1,"Check varSB1 value").to.equal(16);
expect(varScene1,"Check varScene1 value").to.equal('Scene level Variable');
expect(varUserStory1,"Check varUserStory1 value").to.equal('Default Import Example Value');
expect(varUserStory2,"Check varUserStory2 value").to.equal('Provided Import Async Example Value');
validateObject(data, schema);
});});
describe('👩‍🏭User Story 2 - This is the second User Story with 1 criteria',()=>{
it("🚧 1st Criteria - Given a certain scenario, When a certain action is performed, Then",()=>{console.log('Example...','User Story 2 - 1st Expectation');
cy.log('Example...','User Story 2 - 2nd Expectation');
});
it("🚧 2nd Criteria - Given a certain scenario, When a certain action is performed, Then...",()=>{});});});
describe('📃2nd Scene - This is the second scene & has 2 user stories',()=>{
describe('👩‍🏭User Story 1 - This is the first User Story with 2 criteria',()=>{
it("🚧 1st Criteria - Given a certain scenario, When a certain action is performed, Then",()=>{});
it("🚧 2nd Criteria - Given a certain scenario, When a certain action is performed, Then",()=>{});});
describe('👩‍🏭User Story 2 - This is the second User Story',()=>{
it("🚧 1st Criteria - Given a certain scenario, When a certain action is performed, Then",()=>{});});});});});

// AJV Object Validation Methods
import Ajv from "ajv";
const ajv = new Ajv({ $data: true, allErrors: true, allowMatchingProperties: true, });
require("ajv-formats")(ajv);
require("ajv-merge-patch")(ajv);
ajv.addKeyword("$version");
function validateObject(objectToValidate, schema) {
    expect(objectToValidate, "Schema => " + JSON.stringify(schema)).to.equal(ajv.validate(schema.$id, objectToValidate) ? objectToValidate : ajv.errors.filter(e => e.keyword != "$merge"));
}
